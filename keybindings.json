// Place your key bindings in this file to override the defaultsauto[]
[
    {
        "command": "-workbench.action.splitEditor",
        "key": "ctrl+\\"
    },
    {
        "command": "workbench.action.togglePanel",
        "key": "ctrl+\\"
    },
    {
        "command": "-workbench.action.togglePanel",
        "key": "ctrl+j"
    },
    {
        "command": "-leadermode.enter",
        "key": "ctrl+l",
        "when": "editorTextFocus"
    },
    {
        "command": "list.find",
        "key": "/",
        "when": "listFocus && listSupportsFind && !inputFocus"
    },
    {
        "command": "selectNextSuggestion",
        "key": "ctrl+j",
        "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus || suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion"
    },
    {
        "command": "-editor.action.addCommentLine",
        "key": "ctrl+k ctrl+c",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "command": "-workbench.action.editor.changeLanguageMode",
        "key": "ctrl+k m",
        "when": "!notebookEditorFocused"
    },
    {
        "command": "-editor.createFoldingRangeFromSelection",
        "key": "ctrl+k ctrl+,",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "command": "-editor.debug.action.showDebugHover",
        "key": "ctrl+k ctrl+i",
        "when": "editorTextFocus && inDebugMode"
    },
    {
        "command": "-editor.action.defineKeybinding",
        "key": "ctrl+k ctrl+k",
        "when": "resource == 'vscode-userdata:/home/lasagnanator/.config/VSCodium/User/keybindings.json'"
    },
    {
        "command": "-workbench.files.action.focusOpenEditorsView",
        "key": "ctrl+k e",
        "when": "workbench.explorer.openEditorsView.active"
    },
    {
        "command": "-workbench.files.action.compareWithClipboard",
        "key": "ctrl+k c"
    },
    {
        "command": "-workbench.files.action.compareWithSaved",
        "key": "ctrl+k d"
    },
    {
        "command": "-copyFilePath",
        "key": "ctrl+k ctrl+alt+c",
        "when": "editorFocus"
    },
    {
        "command": "-copyRelativeFilePath",
        "key": "ctrl+k ctrl+shift+alt+c",
        "when": "editorFocus"
    },
    {
        "command": "-workbench.action.files.showOpenedFileInNewWindow",
        "key": "ctrl+k o",
        "when": "emptyWorkspaceSupport"
    },
    {
        "command": "-workbench.action.files.openFolder",
        "key": "ctrl+k ctrl+o",
        "when": "openFolderWorkspaceSupport"
    },
    {
        "command": "-workbench.action.files.saveWithoutFormatting",
        "key": "ctrl+k s"
    },
    {
        "command": "-workbench.action.showAllEditors",
        "key": "ctrl+k ctrl+p"
    },
    {
        "command": "-editor.foldAll",
        "key": "ctrl+k ctrl+0",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "command": "-editor.foldAllBlockComments",
        "key": "ctrl+k ctrl+/",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "command": "-editor.foldAllExcept",
        "key": "ctrl+k ctrl+-",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "command": "-editor.foldAllMarkerRegions",
        "key": "ctrl+k ctrl+8",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "command": "-editor.foldLevel1",
        "key": "ctrl+k ctrl+1",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "command": "-editor.foldLevel2",
        "key": "ctrl+k ctrl+2",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "command": "-editor.foldLevel3",
        "key": "ctrl+k ctrl+3",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "command": "-editor.foldLevel4",
        "key": "ctrl+k ctrl+4",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "command": "-editor.foldLevel5",
        "key": "ctrl+k ctrl+5",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "command": "-editor.foldLevel6",
        "key": "ctrl+k ctrl+6",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "command": "-editor.foldLevel7",
        "key": "ctrl+k ctrl+7",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "command": "-editor.foldRecursively",
        "key": "ctrl+k ctrl+[",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "command": "-editor.action.formatSelection",
        "key": "ctrl+k ctrl+f",
        "when": "editorHasDocumentSelectionFormattingProvider && editorTextFocus && !editorReadonly"
    },
    {
        "command": "-git.revertSelectedRanges",
        "key": "ctrl+k ctrl+r",
        "when": "isInDiffEditor && !operationInProgress"
    },
    {
        "command": "-git.stageSelectedRanges",
        "key": "ctrl+k ctrl+alt+s",
        "when": "isInDiffEditor && !operationInProgress"
    },
    {
        "command": "-git.unstageSelectedRanges",
        "key": "ctrl+k ctrl+n",
        "when": "isInDiffEditor && !operationInProgress"
    },
    {
        "command": "-workbench.action.navigateToLastEditLocation",
        "key": "ctrl+k ctrl+q"
    },
    {
        "command": "-workbench.action.keybindingsReference",
        "key": "ctrl+k ctrl+r"
    },
    {
        "command": "-inlineChat.start",
        "key": "ctrl+k i",
        "when": "inlineChatHasProvider && !editorReadonly"
    },
    {
        "command": "-markdown.showPreviewToSide",
        "key": "ctrl+k v",
        "when": "!notebookEditorFocused && editorLangId == 'markdown'"
    },
    {
        "command": "-editor.action.moveSelectionToNextFindMatch",
        "key": "ctrl+k ctrl+d",
        "when": "editorFocus"
    },
    {
        "command": "-notebook.cell.collapseCellInput",
        "key": "ctrl+k ctrl+c",
        "when": "notebookCellListFocused && !inputFocus && !notebookCellInputIsCollapsed"
    },
    {
        "command": "-notebook.cell.collapseCellOutput",
        "key": "ctrl+k t",
        "when": "notebookCellHasOutputs && notebookCellListFocused && !inputFocus && !notebookCellOutputIsCollapsed"
    },
    {
        "command": "-notebook.cell.expandCellInput",
        "key": "ctrl+k ctrl+c",
        "when": "notebookCellInputIsCollapsed && notebookCellListFocused"
    },
    {
        "command": "-notebook.cell.expandCellOutput",
        "key": "ctrl+k t",
        "when": "notebookCellListFocused && notebookCellOutputIsCollapsed"
    },
    {
        "command": "-notebook.cell.split",
        "key": "ctrl+k ctrl+shift+\\",
        "when": "editorTextFocus && notebookCellEditable && notebookEditable && notebookEditorFocused"
    },
    {
        "command": "-notebook.cell.toggleOutputScrolling",
        "key": "ctrl+k y",
        "when": "notebookCellHasOutputs && notebookCellListFocused && !inputFocus"
    },
    {
        "command": "-editor.action.revealDefinitionAside",
        "key": "ctrl+k f12",
        "when": "editorHasDefinitionProvider && editorTextFocus && !isInEmbeddedEditor"
    },
    {
        "command": "-editor.action.revealDefinitionAside",
        "key": "ctrl+k ctrl+f12",
        "when": "editorHasDefinitionProvider && editorTextFocus && isWeb && !isInEmbeddedEditor"
    },
    {
        "command": "-workbench.action.selectTheme",
        "key": "ctrl+k ctrl+t"
    },
    {
        "command": "-workbench.action.openGlobalKeybindings",
        "key": "ctrl+k ctrl+s"
    },
    {
        "command": "-editor.action.removeCommentLine",
        "key": "ctrl+k ctrl+u",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "command": "-editor.removeManualFoldingRanges",
        "key": "ctrl+k ctrl+.",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "command": "-editor.action.selectFromAnchorToCursor",
        "key": "ctrl+k ctrl+k",
        "when": "editorTextFocus && selectionAnchorSet"
    },
    {
        "command": "-editor.action.setSelectionAnchor",
        "key": "ctrl+k ctrl+b",
        "when": "editorTextFocus"
    },
    {
        "command": "-editor.action.showHover",
        "key": "ctrl+k ctrl+i",
        "when": "editorTextFocus"
    },
    {
        "command": "-workbench.action.terminal.focusHover",
        "key": "ctrl+k ctrl+i",
        "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalIsOpen || terminalFocus && terminalProcessSupported || terminalHasBeenCreated && terminalTabsFocus || terminalIsOpen && terminalTabsFocus || terminalProcessSupported && terminalTabsFocus"
    },
    {
        "command": "-editor.toggleFold",
        "key": "ctrl+k ctrl+l",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "command": "-editor.action.trimTrailingWhitespace",
        "key": "ctrl+k ctrl+x",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "command": "-editor.unfoldAll",
        "key": "ctrl+k ctrl+j",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "command": "-editor.unfoldAllExcept",
        "key": "ctrl+k ctrl+=",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "command": "-editor.unfoldAllMarkerRegions",
        "key": "ctrl+k ctrl+9",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "command": "-editor.unfoldRecursively",
        "key": "ctrl+k ctrl+]",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "command": "-workbench.action.closeAllGroups",
        "key": "ctrl+k ctrl+shift+w"
    },
    {
        "command": "-workbench.action.closeAllEditors",
        "key": "ctrl+k ctrl+w"
    },
    {
        "command": "-workbench.action.closeEditorsInGroup",
        "key": "ctrl+k w"
    },
    {
        "command": "-workbench.action.closeUnmodifiedEditors",
        "key": "ctrl+k u"
    },
    {
        "command": "-workbench.action.focusAboveGroup",
        "key": "ctrl+k ctrl+up"
    },
    {
        "command": "-workbench.action.focusBelowGroup",
        "key": "ctrl+k ctrl+down"
    },
    {
        "command": "-workbench.action.focusLeftGroup",
        "key": "ctrl+k ctrl+left"
    },
    {
        "command": "-workbench.action.focusRightGroup",
        "key": "ctrl+k ctrl+right"
    },
    {
        "command": "-workbench.action.joinEditorInGroup",
        "key": "ctrl+k ctrl+shift+\\",
        "when": "sideBySideEditorActive"
    },
    {
        "command": "-workbench.action.keepEditor",
        "key": "ctrl+k enter"
    },
    {
        "command": "-workbench.action.moveActiveEditorGroupDown",
        "key": "ctrl+k down"
    },
    {
        "command": "-workbench.action.moveActiveEditorGroupLeft",
        "key": "ctrl+k left"
    },
    {
        "command": "-workbench.action.moveActiveEditorGroupRight",
        "key": "ctrl+k right"
    },
    {
        "command": "-workbench.action.moveActiveEditorGroupUp",
        "key": "ctrl+k up"
    },
    {
        "command": "-workbench.action.nextEditorInGroup",
        "key": "ctrl+k ctrl+pagedown"
    },
    {
        "command": "-workbench.action.previousEditorInGroup",
        "key": "ctrl+k ctrl+pageup"
    },
    {
        "command": "-workbench.action.pinEditor",
        "key": "ctrl+k shift+enter",
        "when": "!activeEditorIsPinned"
    },
    {
        "command": "-workbench.action.splitEditorDown",
        "key": "ctrl+k ctrl+\\"
    },
    {
        "command": "-workbench.action.splitEditorInGroup",
        "key": "ctrl+k ctrl+shift+\\",
        "when": "activeEditorCanSplitInGroup"
    },
    {
        "command": "-workbench.action.splitEditorLeft",
        "key": "ctrl+k ctrl+\\"
    },
    {
        "command": "-workbench.action.splitEditorOrthogonal",
        "key": "ctrl+k ctrl+\\"
    },
    {
        "command": "-workbench.action.splitEditorRight",
        "key": "ctrl+k ctrl+\\"
    },
    {
        "command": "-workbench.action.splitEditorUp",
        "key": "ctrl+k ctrl+\\"
    },
    {
        "command": "-workbench.action.output.toggleOutput",
        "key": "ctrl+k ctrl+h",
        "when": "workbench.panel.output.active"
    },
    {
        "command": "-workbench.action.toggleZenMode",
        "key": "ctrl+k z"
    },
    {
        "command": "-workbench.action.unpinEditor",
        "key": "ctrl+k shift+enter",
        "when": "activeEditorIsPinned"
    },
    {
        "command": "-workbench.action.closeFolder",
        "key": "ctrl+k f",
        "when": "emptyWorkspaceSupport && workbenchState != 'empty'"
    },
    {
        "command": "-extension.vim_ctrl+k",
        "key": "ctrl+k",
        "when": "editorTextFocus && vim.active && vim.use<C-k> && !inDebugRepl"
    },
    {
        "command": "-keybindings.editor.addKeybinding",
        "key": "ctrl+k ctrl+a",
        "when": "inKeybindings && keybindingFocus"
    },
    {
        "command": "-keybindings.editor.defineWhenExpression",
        "key": "ctrl+k ctrl+e",
        "when": "inKeybindings && keybindingFocus"
    },
    {
        "command": "-togglePeekWidgetFocus",
        "key": "ctrl+k f2",
        "when": "inReferenceSearchEditor || referenceSearchVisible"
    },
    {
        "command": "-views.moveViewDown",
        "key": "ctrl+k down",
        "when": "focusedView != ''"
    },
    {
        "command": "-views.moveViewLeft",
        "key": "ctrl+k left",
        "when": "focusedView != ''"
    },
    {
        "command": "-views.moveViewRight",
        "key": "ctrl+k right",
        "when": "focusedView != ''"
    },
    {
        "command": "-views.moveViewUp",
        "key": "ctrl+k up",
        "when": "focusedView != ''"
    },
    {
        "command": "-workbench.action.compareEditor.openSide",
        "key": "ctrl+k shift+o",
        "when": "inDiffEditor"
    },
    {
        "command": "-workbench.action.files.copyPathOfActiveFile",
        "key": "ctrl+k p"
    },
    {
        "command": "-workbench.action.files.openLocalFolder",
        "key": "ctrl+k ctrl+o",
        "when": "remoteFileDialogVisible"
    },
    {
        "command": "-workbench.action.files.revealActiveFileInWindows",
        "key": "ctrl+k r"
    },
    {
        "command": "-workbench.action.showTreeHover",
        "key": "ctrl+k ctrl+i",
        "when": "customTreeView && listFocus && !inputFocus"
    },
    {
        "command": "selectPrevSuggestion",
        "key": "ctrl+k",
        "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus || suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion"
    },
    {
        "command": "-editor.action.accessibleViewAcceptInlineCompletion",
        "key": "ctrl+/",
        "when": "accessibleViewIsShown && accessibleViewCurrentProviderId == 'inlineCompletions'"
    },
    {
        "command": "-editor.action.commentLine",
        "key": "ctrl+/",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "command": "actions.find",
        "key": "ctrl+/",
        "when": "editorFocus || editorIsOpen"
    },
    {
        "command": "editor.action.showHover",
        "key": "ctrl+space"
    },
    {
        "command": "editor.action.scrollDownHover",
        "key": "j",
        "when": "editorHoverFocused"
    },
    {
        "command": "editor.action.scrollLeftHover",
        "key": "l",
        "when": "editorHoverFocused"
    },
    {
        "command": "editor.action.scrollRightHover",
        "key": "h",
        "when": "editorHoverFocused"
    },
    {
        "command": "editor.action.scrollUpHover",
        "key": "k",
        "when": "editorHoverFocused"
    },
    {
        "command": "selectNextCodeAction",
        "key": "ctrl+j",
        "when": "codeActionMenuVisible"
    },
    {
        "command": "selectPrevCodeAction",
        "key": "ctrl+k",
        "when": "codeActionMenuVisible"
    },
    {
        "command": "editor.action.marker.next",
        "key": "alt+]",
        "when": "editorFocus"
    },
    {
        "command": "editor.action.marker.prev",
        "key": "alt+[",
        "when": "editorFocus"
    },
    {
        "command": "workbench.action.toggleMaximizedPanel",
        "key": "ctrl+m"
    },
    {
        "command": "workbench.action.focusPanel",
        "key": "ctrl+\\",
        "when": "!panelFocus"
    },
    {
        "command": "workbench.action.focusActiveEditorGroup",
        "key": "ctrl+space",
        "when": "!editorFocus"
    },
    {
        "command": "selectPrevSuggestion",
        "key": "ctrl+k",
        "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus || suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion"
    },
    {
        "command": "list.focusDown",
        "key": "ctrl+j",
        "when": "listFocus && !inputFocus"
    },
    {
        "command": "list.focusUp",
        "key": "ctrl+k",
        "when": "listFocus && !inputFocus"
    },
    {
        "command": "-editor.action.defineKeybinding",
        "key": "ctrl+k ctrl+k",
        "when": "resource == 'vscode-userdata:/c%3A/Users/andrea.divo/AppData/Roaming/Code/User/keybindings.json'"
    },
    {
        "command": "-copyRelativeFilePath",
        "key": "ctrl+k ctrl+shift+c",
        "when": "!editorFocus"
    },
    {
        "command": "-copyRelativeFilePath",
        "key": "ctrl+k ctrl+shift+c",
        "when": "editorFocus"
    },
    {
        "command": "-workbench.action.files.saveWithoutFormatting",
        "key": "ctrl+k ctrl+shift+s"
    },
    {
        "command": "-saveAll",
        "key": "ctrl+k s"
    },
    {
        "command": "workbench.action.quickOpenSelectNext",
        "key": "ctrl+j",
        "when": "inQuickOpen"
    },
    {
        "command": "workbench.action.quickOpenSelectPrevious",
        "key": "ctrl+k",
        "when": "inQuickOpen"
    },
    {
        "command": "gitlens.gitCommands",
        "key": "alt+g",
        "when": "!gitlens:disabled"
    },
    {
        "command": "-breadcrumbs.toggleToOn",
        "key": "ctrl+shift+.",
        "when": "!config.breadcrumbs.enabled"
    },
    {
        "command": "breadcrumbs.focusPrevious",
        "key": "h",
        "when": "breadcrumbsActive && breadcrumbsVisible"
    },
    {
        "command": "breadcrumbs.focusNext",
        "key": "l",
        "when": "breadcrumbsActive && breadcrumbsVisible"
    },
    {
        "command": "breadcrumbs.focus",
        "key": "ctrl+'",
        "when": "breadcrumbsPossible && breadcrumbsVisible"
    },
    {
        "command": "-breadcrumbs.focus",
        "key": "ctrl+shift+;",
        "when": "breadcrumbsPossible && breadcrumbsVisible"
    },
    {
        "command": "workbench.action.focusAboveGroup",
        "key": "alt+k"
    },
    {
        "command": "workbench.action.focusLeftGroup",
        "key": "alt+h"
    },
    {
        "command": "workbench.action.focusRightGroup",
        "key": "alt+l"
    },
    {
        "command": "workbench.action.focusBelowGroup",
        "key": "alt+j"
    },
    {
        "command": "keybindings.editor.recordSearchKeys",
        "key": "shift+alt+k",
        "when": "inKeybindings && inKeybindingsSearch"
    },
    {
        "command": "-keybindings.editor.recordSearchKeys",
        "key": "alt+k",
        "when": "inKeybindings && inKeybindingsSearch"
    },
    {
        "command": "workbench.action.moveEditorToAboveGroup",
        "key": "ctrl+alt+k"
    },
    {
        "command": "workbench.action.moveEditorToBelowGroup",
        "key": "ctrl+alt+j"
    },
    {
        "command": "workbench.action.moveEditorToLeftGroup",
        "key": "ctrl+alt+h"
    },
    {
        "command": "workbench.action.moveEditorToRightGroup",
        "key": "ctrl+alt+l"
    },
    {
        "command": "workbench.action.previousEditor",
        "key": "alt+,"
    },
    {
        "command": "workbench.action.nextEditor",
        "key": "alt+."
    },
    {
        "command": "workbench.action.moveEditorLeftInGroup",
        "key": "ctrl+alt+,"
    },
    {
        "command": "workbench.action.moveEditorRightInGroup",
        "key": "ctrl+alt+."
    },
    {
        "command": "workbench.action.toggleSidebarVisibility",
        "key": "ctrl+shift+b"
    },
    {
        "command": "-workbench.action.toggleSidebarVisibility",
        "key": "ctrl+b"
    },
    {
        "command": "-editor.action.insertLineAfter",
        "key": "ctrl+enter",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "command": "explorer.newFile",
        "key": "ctrl+n",
        "when": "filesExplorerFocus && !inputFocus"
    },
    {
        "command": "workbench.action.files.newUntitledFile",
        "key": "ctrl+alt+n"
    },
    {
        "command": "-workbench.action.files.newUntitledFile",
        "key": "ctrl+n"
    },
    {
        "command": "workbench.action.terminal.focusFind",
        "key": "ctrl+/",
        "when": "terminalFindFocused && terminalHasBeenCreated || terminalFindFocused && terminalProcessSupported || terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
    },
    {
        "command": "-workbench.action.terminal.focusFind",
        "key": "ctrl+f",
        "when": "terminalFindFocused && terminalHasBeenCreated || terminalFindFocused && terminalProcessSupported || terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
    },
    {
        "key": "ctrl+f",
        "command": "-workbench.action.terminal.focusFind",
        "when": "terminalFindFocused && terminalHasBeenCreated || terminalFindFocused && terminalProcessSupported || terminalFocusInAny && terminalHasBeenCreated || terminalFocusInAny && terminalProcessSupported"
    },
    {
        "key": "alt+x",
        "command": "workbench.action.showCommands"
    },
    {
        "key": "ctrl+alt+\\",
        "command": "workbench.action.terminal.moveToTerminalPanel",
        "when": "terminalEditorFocus"
    },
    {
        "key": "ctrl+alt+\\",
        "command": "workbench.action.terminal.moveToEditor",
        "when": "!terminalEditorFocus"
    },
    {
        "key": "alt+g /",
        "command": "gitlens.gitCommands",
        "when": "!gitlens:disabled && config.gitlens.keymap == 'chorded'"
    },
    {
        "key": "ctrl+shift+g /",
        "command": "-gitlens.gitCommands",
        "when": "!gitlens:disabled && config.gitlens.keymap == 'chorded'"
    },
    {
        "key": "alt+g .",
        "command": "gitlens.diffWithNext",
        "when": "editorTextFocus && !isInDiffEditor && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /revision/"
    },
    {
        "key": "ctrl+shift+g .",
        "command": "-gitlens.diffWithNext",
        "when": "editorTextFocus && !isInDiffEditor && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /revision/"
    },
    {
        "key": "alt+g /",
        "command": "gitlens.diffWithNextInDiffLeft",
        "when": "editorTextFocus && isInDiffEditor && !isInDiffRightEditor && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /revision/"
    },
    {
        "key": "ctrl+shift+g .",
        "command": "-gitlens.diffWithNextInDiffLeft",
        "when": "editorTextFocus && isInDiffEditor && !isInDiffRightEditor && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /revision/"
    },
    {
        "key": "alt+g .",
        "command": "gitlens.diffWithNextInDiffRight",
        "when": "editorTextFocus && isInDiffRightEditor && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /revision/"
    },
    {
        "key": "ctrl+shift+g .",
        "command": "-gitlens.diffWithNextInDiffRight",
        "when": "editorTextFocus && isInDiffRightEditor && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /revision/"
    },
    {
        "key": "alt+g ,",
        "command": "gitlens.diffWithPrevious",
        "when": "editorTextFocus && !isInDiffEditor && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /tracked/"
    },
    {
        "key": "ctrl+shift+g ,",
        "command": "-gitlens.diffWithPrevious",
        "when": "editorTextFocus && !isInDiffEditor && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /tracked/"
    },
    {
        "key": "alt+g ,",
        "command": "gitlens.diffWithPreviousInDiffLeft",
        "when": "editorTextFocus && isInDiffEditor && !isInDiffRightEditor && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /tracked/"
    },
    {
        "key": "ctrl+shift+g ,",
        "command": "-gitlens.diffWithPreviousInDiffLeft",
        "when": "editorTextFocus && isInDiffEditor && !isInDiffRightEditor && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /tracked/"
    },
    {
        "key": "alt+g ,",
        "command": "gitlens.diffWithPreviousInDiffRight",
        "when": "editorTextFocus && isInDiffRightEditor && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /tracked/"
    },
    {
        "key": "ctrl+shift+g ,",
        "command": "-gitlens.diffWithPreviousInDiffRight",
        "when": "editorTextFocus && isInDiffRightEditor && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /tracked/"
    },
    {
        "key": "alt+g shift+.",
        "command": "gitlens.diffWithWorking",
        "when": "editorTextFocus && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /revision/"
    },
    {
        "key": "ctrl+shift+g shift+.",
        "command": "-gitlens.diffWithWorking",
        "when": "editorTextFocus && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /revision/"
    },
    {
        "key": "alt+g shift+,",
        "command": "gitlens.diffLineWithPrevious",
        "when": "editorTextFocus && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /tracked/"
    },
    {
        "key": "ctrl+shift+g shift+,",
        "command": "-gitlens.diffLineWithPrevious",
        "when": "editorTextFocus && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /tracked/"
    },
    {
        "key": "alt+g c",
        "command": "gitlens.showQuickCommitFileDetails",
        "when": "editorTextFocus && !gitlens:disabled && config.gitlens.keymap == 'chorded'"
    },
    {
        "key": "ctrl+shift+g c",
        "command": "-gitlens.showQuickCommitFileDetails",
        "when": "editorTextFocus && !gitlens:disabled && config.gitlens.keymap == 'chorded'"
    },
    {
        "key": "alt+g shift+h",
        "command": "gitlens.showQuickRepoHistory",
        "when": "!gitlens:disabled && config.gitlens.keymap == 'chorded'"
    },
    {
        "key": "ctrl+shift+g shift+h",
        "command": "-gitlens.showQuickRepoHistory",
        "when": "!gitlens:disabled && config.gitlens.keymap == 'chorded'"
    },
    {
        "key": "alt+g h",
        "command": "gitlens.showQuickFileHistory",
        "when": "!gitlens:disabled && config.gitlens.keymap == 'chorded'"
    },
    {
        "key": "ctrl+shift+g h",
        "command": "-gitlens.showQuickFileHistory",
        "when": "!gitlens:disabled && config.gitlens.keymap == 'chorded'"
    },
    {
        "key": "alt+g s",
        "command": "gitlens.showQuickRepoStatus",
        "when": "!gitlens:disabled && config.gitlens.keymap == 'chorded'"
    },
    {
        "key": "ctrl+shift+g s",
        "command": "-gitlens.showQuickRepoStatus",
        "when": "!gitlens:disabled && config.gitlens.keymap == 'chorded'"
    },
    {
        "key": "alt+g b",
        "command": "gitlens.toggleFileBlame",
        "when": "editorTextFocus && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /blameable/"
    },
    {
        "key": "ctrl+shift+g b",
        "command": "-gitlens.toggleFileBlame",
        "when": "editorTextFocus && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /blameable/"
    },
    {
        "key": "alt+g shift+b",
        "command": "gitlens.toggleCodeLens",
        "when": "editorTextFocus && !gitlens:disabled && !gitlens:disabledToggleCodeLens && config.gitlens.keymap == 'chorded'"
    },
    {
        "key": "ctrl+shift+g shift+b",
        "command": "-gitlens.toggleCodeLens",
        "when": "editorTextFocus && !gitlens:disabled && !gitlens:disabledToggleCodeLens && config.gitlens.keymap == 'chorded'"
    },
    {
        "key": "alt+g g",
        "command": "workbench.view.scm",
        "when": "workbench.scm.active && !gitlens:disabled && config.gitlens.keymap == 'chorded'"
    },
    {
        "key": "ctrl+shift+g g",
        "command": "-workbench.view.scm",
        "when": "workbench.scm.active && !gitlens:disabled && config.gitlens.keymap == 'chorded'"
    }
]